
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

def getBintrayUser() {
    return project.hasProperty('bintray.user') ? project.getProperty('bintray.user') : ''
}

def getBintrayKey() {
    return project.hasProperty('bintray.apiKey') ? project.getProperty('bintray.apiKey') : ''
}

def getBintrayGPGPassword() {
    return project.hasProperty('bintray.gpg.password') ? project.getProperty('bintray.gpg.password') : ''
}

def getBintrayOSSUser() {
    return project.hasProperty('bintray.oss.user') ? project.getProperty('bintray.oss.user') : ''
}

def getBintrayOSSPassword() {
    return project.hasProperty('bintray.oss.password') ? project.getProperty('bintray.oss.password') : ''
}

install {
    repositories.mavenInstaller{
        pom.project {
                packaging POM_PACKAGING
                name POM_NAME
                description POM_DESCRIPTION
                url POM_URL

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }

                scm {
                    url POM_SCM_URL
                }
        }
    }
}

android.libraryVariants.all { variant ->
    def javadocTask = task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    javadocTask.dependsOn variant.javaCompile

    def jarJavadocTask = task("jar${variant.name.capitalize()}Javadoc", type: Jar) {
        description "Generate Javadoc Jar for $variant.name"
        classifier = 'javadoc'
        from javadocTask.destinationDir
    }

    jarJavadocTask.dependsOn javadocTask
    artifacts.add('archives', jarJavadocTask)

    def jarSourceTask = task("jar${variant.name.capitalize()}Sources", type: Jar) {
        description "Generates Java Sources for $variant.name."
        classifier = 'sources'
        from variant.javaCompile.source
    }

    jarSourceTask.dependsOn variant.javaCompile
    artifacts.add('archives', jarSourceTask)
}

bintray {
    user = getBintrayUser()
    key = getBintrayKey()

    configurations = ['archives']

    pkg {
        repo = "maven"
        name = rootProject.name
        desc = POM_DESCRIPTION
        websiteUrl = POM_URL
        vcsUrl = POM_URL
        licenses = ["Apache-2.0"]
        publish = true
//        version {
//            gpg {
//                sign = true
//                passphrase = getBintrayGPGPassword()
//            }
//            mavenCentralSync {
//                sync = true
//                user = getBintrayOSSUser()
//                password = getBintrayOSSPassword()
//                close = '1'
//            }
//
//        }
    }
}
